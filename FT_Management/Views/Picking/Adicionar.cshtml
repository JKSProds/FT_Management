@model FT_Management.Models.Picking

@{
    ViewData["Title"] = "Picking - " + Model.NomeCliente;
}
    <div class="container">
        <div class="columns">
            <div class="column">
                <div class="tile">
                    <div class="tile is-parent is-vertical">
                        <article class="tile is-child notification is-info">
                            <p class="title">
                                <span class="icon mr-3">
                                   <i class="fa-solid fa-barcode"></i>
                                </span>
                                <span>@Model.IdPicking - @Model.NomeCliente</span>
                            </p>
                        </article>
                    </div>
                </div>
            </div>
        </div>
    </div>
<hr />
@foreach (var item in Model.Linhas) {
    @if (item.Serie) {
            <div class="columns is-gapless">
            <div class="column mx-1">
                <div class="card has-table has-mobile-sort-spaced">
                    <header class="card-header @(item.Validado ? "has-background-success" : "has-background-info")">
                        <p class="card-header-title" style="color:#ffffff">
                            <span class="icon"><i class="fa-solid fa-box"></i></span>
                            @item.Ref_linha
                        </p>
                    <a class="card-header-icon button is-success m-1 is-disabled">@item.Qtd_Separar</a>
                    </header>
                    <div class="card-content">
                        <div class="b-table">
                            <div class="table-wrapper has-mobile-cards">
                                    <table class="table is-fullwidth">
                                        <thead>
                                            <tr>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Ref_linha)</th>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Nome_Linha)</th>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Linha_Serie)</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < item.Qtd_Separar; i++) {
                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Ref_linha)">@item.Ref_linha</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Nome_Linha)">@item.Nome_Linha</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Linha_Serie)"><input class="input" type="text" value="@item.Linha_Serie[i].NumSerie" id="txtSerie_@item.Picking_Linha_Stamp@i"/></td>
                                                    <td class="is-actions-cell">
                                                        <a class="button is-success is-rounded is-fullwidth" onclick="ValidarSerie('@item.Picking_Linha_Stamp', @i, '@item.Linha_Serie[i].BOMA_STAMP')">
                                                            <span class="icon is-small">
                                                               <i class="fa-solid fa-check"></i>
                                                            </span>
                                                    </a>
                                                    </td>
                                                </tr>
                                                }
                                            </tbody>
                                    </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }else{
    <div class="columns is-gapless">
            <div class="column mx-1">
                <div class="card has-table has-mobile-sort-spaced">
                    <header class="card-header @(item.Validado ? "has-background-success" : "has-background-info")">
                        <p class="card-header-title" style="color:#ffffff">
                            <span class="icon"><i class="fa-solid fa-boxes-stacked"></i></span>
                            @item.Ref_linha
                        </p>
                    <a class="card-header-icon button is-success m-1 is-disabled">@item.Qtd_Separar</a>
                    </header>
                    <div class="card-content">
                        <div class="b-table">
                            <div class="table-wrapper has-mobile-cards">
                                    <table class="table is-fullwidth ">
                                        <thead>
                                            <tr>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Ref_linha)</th>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Nome_Linha)</th>
                                                <th>@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Qtd_Separar)</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Ref_linha)">@item.Ref_linha</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Nome_Linha)">@item.Nome_Linha</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.Linhas.FirstOrDefault().Qtd_Separar)"><input class="input" type="number" value="@item.Qtd_Separar" id="txtQtd_@item.Picking_Linha_Stamp"/></td>
                                                    <td class="is-actions-cell">
                                                        <a class="button is-success is-rounded is-fullwidth" onclick="ValidarQuantidade('@item.Picking_Linha_Stamp')">
                                                            <span class="icon is-small">
                                                               <i class="fa-solid fa-check"></i>
                                                            </span>
                                                    </a>
                                                    </td>
                                                </tr>
                                            </tbody>
                                    </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class="modal" id="modalMensagem">
  <div class="modal-background"></div>
  <div class="modal-card">
    <header class="modal-card-head">
      <p class="modal-card-title">Informação</p>
    </header>
    <section class="modal-card-body">
        <h1 id="txtMensagem" style="font-size:200%;font-weight:1000"></h1>
    </section>
    <footer class="modal-card-foot">
      <button class="button" onclick="Bulma('#modalMensagem').modal().close();">Ok</button>
    </footer>
  </div>
</div>

<script>
    function ValidarSerie(id, l, l_stamp) {
       // alert(id);
        //alert(document.getElementById('txtSerie_' + id + l).value);

        $.ajax({
            url: '/Picking/Validar/',
            data: { "stamp": id, "qtd": 1, "serie":  document.getElementById('txtSerie_' + id + l).value, "bomastamp" : l_stamp},
            type: "POST",
            success: function (data) {
                if (data == "") {
                    bulmaToast.toast({
                        message: 'Núm. de Série inserido com sucesso!',
                        type: 'is-success',
                        closeOnClick: true,
                        pauseOnHover: true,
                        opacity: 0.8,
                        duration: 5000
                    })
                } else {
                document.getElementById('txtSerie_' + id + l).value = "";
                ModalMensagem(data, "danger");
                PlayBeep();
                }
            },
            error: function (response) {
                ModalMensagem("Ocorreu um erro ao validar o Número de Série no PHC. Por favor tente novamente!", "danger");
                PlayBeep();
            },
            failure: function (response) {
                ModalMensagem("Ocorreu um erro ao validar o Número de Série no PHC. Por favor tente novamente!", "danger");
                PlayBeep();            
            }
        });

    }

    function ValidarQuantidade(id) {
        //alert(id);
        //alert(document.getElementById('txtQtd_' + id).value);

        $.ajax({
            url: '/Picking/Validar/',
            data: { "stamp": id, "qtd": document.getElementById('txtQtd_' + id).value},
            type: "POST",
            success: function (data) {
                document.getElementById('txtQtd_' + id).closest('.card').childNodes[1].classList.add('has-background-success');
                if (data == "") {
                    bulmaToast.toast({
                        message: 'Quantidade enviada com sucesso!',
                        type: 'is-success',
                        closeOnClick: true,
                        pauseOnHover: true,
                        opacity: 0.8,
                        duration: 5000
                    })
                } else {
                ModalMensagem(data, "danger");
                PlayBeep();
                }
            },
            error: function (response) {
                ModalMensagem("Ocorreu um erro ao validar a quantidade no PHC. Por favor tente novamente!", "danger");
                PlayBeep();
            },
            failure: function (response) {
                ModalMensagem("Ocorreu um erro ao validar a quantidade no PHC. Por favor tente novamente!", "danger");
                PlayBeep();           
            }
        });
    }

    function PlayBeep() {
        var audio = new Audio('https://food-tech.cloud/index.php/s/GnJnxkJJmGdRSTa/download');
        audio.play();
    }
    function ModalMensagem(mensagem, cor) {
        Bulma('#modalMensagem').modal().header.classList.add('has-background-' + cor)
        document.getElementById('txtMensagem').innerHTML = mensagem;
        Bulma('#modalMensagem').modal().open();
    }

    var elts = document.getElementsByClassName('input')
    Array.from(elts).forEach(function(elt){
      elt.addEventListener("keyup", function(event) {
        if (event.keyCode === 13 && elt.value.length > 0) {
            elt.parentElement.nextElementSibling.childNodes[1].click();
            
            //Passar para o proximo elemento
            if (elt.parentElement.parentElement.nextElementSibling == null) {
                elt.blur();

                ModalMensagem("Chegou ao fim desta referência! Por favor passe para a seguinte!", "warning");
                PlayBeep();

            }else {
                elt.parentElement.parentElement.nextElementSibling.childNodes[5].childNodes[0].focus();
                elt.parentElement.parentElement.nextElementSibling.childNodes[5].childNodes[0].value = "";
            }
        }
      });
})
</script>