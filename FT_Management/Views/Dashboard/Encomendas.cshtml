@model IEnumerable<FT_Management.Models.Encomenda>

@{
    ViewData["Title"] = "Encomendas";
}

<div class="columns">
    <div class="column">
        <div class="card has-table has-mobile-sort-spaced has-background-danger">
            <header class="card-header">
                <p class="card-header-title">
                    <span class="icon"><i class="mdi mdi-account-multiple"></i></span>
                    Em Atraso
                </p>
                <a href="#" class="card-header-icon">
                    <span class="icon"><i class="mdi mdi-reload"></i></span>
                </a>
            </header>
            <div class="card-content">
                <div class="b-table">
                    <div class="table-wrapper has-mobile-cards">
                        @if (Model.Where(e => e.ExisteEncomenda(Encomenda.Tipo.ATRASO)).Count() == 0)
                        {
                            <button class="button is-rounded is-fullwidth" disabled>Não foram encontradas encomendas!</button>
                        }
                        else
                        {
                            <table class="table is-fullwidth has-background-danger">
                                <thead>
                                    <tr>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Id)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Total)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        if (@item.Total && item.DataEnvio <= DateTime.Now.AddDays(-1) && item.DataEnvio.Year > 1900)
                                        {
                                            <tr>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@item.Id</td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@item.NomeCliente</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)">@(DateTime.Now.Subtract(item.DataEnvio).Days)</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                    <span class="icon  mr-2">
                                                        <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                    </span>
                                                </td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@item.NItems</td>
                                            </tr>

                                        }
                                        else
                                        {
                                            foreach (var linha in item.LinhasEncomenda.Where(e => e.DataEnvio <= DateTime.Now.AddDays(-1) && e.DataEnvio.Year > 1900 && !e.Total).ToList())
                                            {

                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@linha.IdEncomenda</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@linha.NomeCliente</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)">@(DateTime.Now.Subtract(linha.DataEnvio).Days)</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                        <span class="icon  mr-2">
                                                            <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                        </span>
                                                    </td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@linha.Produto.Stock_Fisico</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card has-table has-mobile-sort-spaced has-background-success-light">
            <header class="card-header">
                <p class="card-header-title">
                    <span class="icon"><i class="mdi mdi-account-multiple"></i></span>
                    Hoje
                </p>
                <a href="#" class="card-header-icon">
                    <span class="icon"><i class="mdi mdi-reload"></i></span>
                </a>
            </header>
            <div class="card-content">
                <div class="b-table">
                    <div class="table-wrapper has-mobile-cards">
                         @if (Model.Where(e => e.ExisteEncomenda(Encomenda.Tipo.HOJE)).Count() == 0)
                        {
                            <button class="button is-danger is-rounded is-outlined is-fullwidth" disabled>Não foram encontradas encomendas!</button>
                        }
                        else
                        {
                            <table class="table is-fullwidth has-background-success-light">
                                <thead>
                                    <tr>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Id)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Total)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        if (@item.Total && item.DataEnvio.ToShortDateString() == DateTime.Now.ToShortDateString())
                                        {
                                            <tr>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@item.Id</td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@item.NomeCliente</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                    <span class="icon  mr-2">
                                                        <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                    </span>
                                                </td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@item.NItems</td>
                                            </tr>

                                        }
                                        else
                                        {
                                            foreach (var linha in item.LinhasEncomenda.Where(e => e.DataEnvio.ToShortDateString() == DateTime.Now.ToShortDateString() && !e.Total).ToList())
                                            {
                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@linha.IdEncomenda</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@linha.NomeCliente</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                        <span class="icon  mr-2">
                                                            <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                        </span>
                                                    </td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@linha.Produto.Stock_Fisico</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card has-table has-mobile-sort-spaced has-background-warning-light">
            <header class="card-header">
                <p class="card-header-title">
                    <span class="icon"><i class="mdi mdi-account-multiple"></i></span>
                    Amanhã
                </p>
                <a href="#" class="card-header-icon">
                    <span class="icon"><i class="mdi mdi-reload"></i></span>
                </a>
            </header>
            <div class="card-content">
                <div class="b-table">
                    <div class="table-wrapper has-mobile-cards">
                        @if (Model.Where(e => e.ExisteEncomenda(Encomenda.Tipo.AMANHA)).Count() == 0)
                        {
                            <button class="button is-danger is-rounded is-outlined is-fullwidth" disabled>Não foram encontradas encomendas!</button>
                        }
                        else
                        {
                            <table class="table is-fullwidth has-background-warning-light">
                                <thead>
                                    <tr>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Id)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Total)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        if (@item.Total && item.DataEnvio.ToShortDateString() == DateTime.Now.AddDays(1).ToShortDateString())
                                        {
                                            <tr>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@item.Id</td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@item.NomeCliente</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                    <span class="icon  mr-2">
                                                        <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                    </span>
                                                </td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@item.NItems</td>
                                            </tr>

                                        }
                                        else
                                        {
                                            foreach (var linha in item.LinhasEncomenda.Where(e => e.DataEnvio.ToShortDateString() == DateTime.Now.AddDays(1).ToShortDateString() && !e.Total).ToList())
                                            {
                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@linha.IdEncomenda</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@linha.NomeCliente</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                        <span class="icon  mr-2">
                                                            <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                        </span>
                                                    </td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@linha.Produto.Stock_Fisico</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                        </div>
                </div>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card has-table has-mobile-sort-spaced">
            <header class="card-header">
                <p class="card-header-title">
                    <span class="icon"><i class="mdi mdi-account-multiple"></i></span>
                    Próximos
                </p>
                <a href="#" class="card-header-icon">
                    <span class="icon"><i class="mdi mdi-reload"></i></span>
                </a>
            </header>
            <div class="card-content">
                <div class="b-table">
                    <div class="table-wrapper has-mobile-cards">
                        @if (Model.Where(e => e.ExisteEncomenda(Encomenda.Tipo.FUTURO)).Count() == 0)
                        {
                            <button class="button is-danger is-rounded is-outlined is-fullwidth" disabled>Não foram encontradas encomendas!</button>
                        }
                        else
                        {
                            <table class="table is-fullwidth">
                                <thead>
                                    <tr>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Id)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Total)</th>
                                        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        if (@item.Total && item.DataEnvio >= DateTime.Now.AddDays(2))
                                        {
                                            <tr>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@item.Id</td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@item.NomeCliente</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)">@(item.DataEnvio.Subtract(DateTime.Now).Days + 1)</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                    <span class="icon  mr-2">
                                                        <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                    </span>
                                                </td>
                                                <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@item.NItems</td>
                                            </tr>

                                        }
                                        else
                                        {
                                            foreach (var linha in item.LinhasEncomenda.Where(e => e.DataEnvio.ToShortDateString() == DateTime.Now.AddDays(2).ToShortDateString() && !e.Total).ToList())
                                            {
                                                <tr>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Id)">@linha.IdEncomenda</td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NomeCliente)">@linha.NomeCliente</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().DataEnvio)">@(linha.DataEnvio.Subtract(DateTime.Now).Days + 1)</td>
                                                     <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().Total)">
                                                        <span class="icon  mr-2">
                                                            <i class="fa-solid @(item.Total ? "fa-boxes-stacked" : "fa-box")"></i>
                                                        </span>
                                                    </td>
                                                    <td data-label="@Html.DisplayNameFor(model => model.FirstOrDefault().NItems)">@linha.Produto.Stock_Fisico</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        }                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    setTimeout(() => {
      window.location.reload(1);
    }, 60 * 1000);
</script>