@model IEnumerable<FT_Management.Models.Utilizador>

@{
    ViewData["Title"] = "Utilizadores";
}

<style>
    .animation {
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: right;
        align-items: center;
        height: 100vh;
        background: #ffffff;
    }

    .loader {
        position: relative;
        width: 350px;
        height: 350px;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
        animation: animate 1.2s linear infinite;
    }

    @@keyframes animate {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .loader span {
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
    }

        .loader span:nth-child(1) {
            filter: blur(5px);
        }

        .loader span:nth-child(2) {
            filter: blur(10px);
        }

        .loader span:nth-child(3) {
            filter: blur(25px);
        }

        .loader span:nth-child(4) {
            filter: blur(50px);
        }

    .loader:after {
        content: '';
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        background: #f1f1f1;
        border: solid white 10px;
        border-radius: 50%;
    }


    h1 {
        font-size: 6rem;
        padding-left: 20px;
        color: #fff;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }

    input[type=checkbox] {
        --off: #c7cad1;
        --mid: #829ad6;
        --on: #0067a0;
        --transDur: 0.5s;
        --timing: cubic-bezier(0.6,0,0.4,1);
        animation: bgOff var(--transDur) var(--timing);
        background-color: var(--off);
        border-radius: 0.67em / 0.5em;
        box-shadow: 0 0.05em 0.1em #00000007 inset, 0 -0.25em 0.25em #0001 inset, 0 -0.5em 0 #0001 inset, 0 0.1em 0.1em #0001;
        cursor: pointer;
        position: relative;
        width: 2.25em;
        height: 1.5em;
        -webkit-appearance: none;
        appearance: none;
        -webkit-tap-highlight-color: transparent;
    }

        input[type=checkbox]:before {
            animation: handleOff var(--transDur) var(--timing);
            background-attachment: fixed;
            background-position: 50% calc(50% - 0.1875em);
            border-radius: 0.5em / 0.375em;
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--off) inset, 0 0.475em 0.1em #0001 inset;
            content: "";
            display: block;
            position: absolute;
            top: 0.125em;
            left: 0.125em;
            width: 1em;
            height: 0.75em;
        }

        input[type=checkbox]:checked {
            animation: bgOn var(--transDur) var(--timing) forwards;
        }

            input[type=checkbox]:checked:before {
                animation: handleOn var(--transDur) var(--timing) forwards;
            }

        input[type=checkbox]:focus {
            outline: none;
        }

        input[type=checkbox].pristine, input[type=checkbox].pristine:before {
            animation: none;
        }
    /* Animations */
    @@keyframes bgOff {
        from {
            background-color: var(--on);
        }

        50% {
            background-color: var(--mid);
        }

        to {
            background-color: var(--off);
        }
    }

    @@keyframes bgOn {
        from {
            background-color: var(--off);
        }

        50% {
            background-color: var(--mid);
        }

        to {
            background-color: var(--on);
        }
    }

    @@keyframes handleOff {
        from {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--on) inset, 0 0.475em 0.1em #0001 inset;
            left: 1.125em;
            width: 1em;
        }

        50% {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--mid) inset, 0 0.475em 0.1em #0001 inset;
            left: 0.125em;
            width: 2em;
        }

        to {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--off) inset, 0 0.475em 0.1em #0001 inset;
            left: 0.125em;
            width: 1em;
        }
    }

    @@keyframes handleOn {
        from {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--off) inset, 0 0.475em 0.1em #0001 inset;
            left: 0.125em;
            width: 1em;
        }

        50% {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--mid) inset, 0 0.475em 0.1em #0001 inset;
            left: 0.125em;
            width: 2em;
        }

        to {
            box-shadow: 0 0.175em 0.175em 0 #0001 inset, 0 0.375em 0 #0002 inset, 0 0.375em 0 var(--on) inset, 0 0.475em 0.1em #0001 inset;
            left: 1.125em;
            width: 1em;
        }
    }

    .container {
        display: grid;
    }

    .content, .overlay {
        grid-area: 1 / 1;
    }
    /* Styling the button */
    .btn {
        cursor: pointer;
        border: 1px solid #3498db;
        background-color: transparent;
        height: 50px;
        width: 200px;
        color: #3498db;
        font-size: 1.5em;
        box-shadow: 0 6px 6px rgba(0, 0, 0, 0.6);
    }
</style>


<div class="columns is-multiline animation" id="animationDiv">
    <div class="column is-3 container">
        <div class="loader content is-pulled-right" id="loader">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="overlay">
            <input class="pristine" style="zoom:750%;position:relative;left:8px;top:15px;z-index:9" type="checkbox" id="chk" name="toggle" value="on" checked onclick="showDiv();">
        </div>
    </div>
    <div class="column is-6">
        <div class="has-text-centered">
            <img src="~/img/logo_website.png" />
            <br />
            <p class="subtitle">@Html.Raw(ViewData["Frase"])</p>
        </div>
    </div>
    <div class="column is-3 container">
        <div class="loader content is-pulled-left" id="loader">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="overlay">
            <button class="button" style="zoom:650%;left:8px;top:7px;border:0px;background-color:transparent;outline:none;" onclick="NotificacaoEscritorio();" type="button">
                <span class="icon">
                    <i class="fa-solid fa-bell fa-shake"></i>
                </span>
            </button>
        </div>
    </div>
</div>


    <script>
        document.getElementById('chk').removeAttribute("class");
        function showDiv() {
            document.getElementById("animationDiv").style.display = (document.getElementById("animationDiv").style.display == "" ? "none" : "");

            document.getElementById("hiddenDiv").style.display = (document.getElementById("hiddenDiv").style.display == "flex" ? "none" : "flex");

        }

        document.addEventListener("click", e => {
            let tar = e.target;
            if (tar.name == "toggle") 
                tar.removeAttribute("class");
        });</script>

    <div id="hiddenDiv" class='columns is-centered is-multiline' style="display:none">

        @foreach (var u in Model)
        {
            <div class="column is-3" onclick="AbrirModal(@u.Id, '@u.NomeCompleto')">
                <div class='card @(u.Aniversario || u.Ferias ? "has-background-info" : (ViewData["Acesso"].ToString() == "1" ? (u.AcessoAtivo ? "has-background-success" : "has-background-danger") : ""))'>
                    <div class="card-content">
                        <div class="media">
                            <div class="media-left">
                                <figure class="image is-48x48">
                                    <img class="is-rounded" src="@u.ImgUtilizador" alt="user">
                                </figure>
                            </div>
                            <div class="media-content">
                                <p class="title is-4">@u.NomeCompleto</p>
                                <p class="subtitle is-6">
                                    @(ViewData["Hora"].ToString() == "1" ? u.UltimoAcesso.ToShortTimeString() :
              "")<b>
                                        @(u.Aniversario ? " Aniversário" :
                (u.Ferias ? " Férias" : ""))
                                    </b>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>

    <div class="modal" id="modalFaceId">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head" id="divHeaderModal">
                <p class="modal-card-title" id="txtHeaderModal">Registar Acesso</p>
                <button class="delete" aria-label="close"></button>
            </header>
            <section class="modal-card-body">
                <input type="hidden" class="input is-large my-2 has-text-centered" value="">
                <input type="hidden" value="0" id='txtUtilizadorSelecionado'>
            <div style="position: relative;">
                <video id="video" playsinline class="video" width="600" height="337" style="width: 100%; border-radius: 20px;"></video>
                <canvas id="canvas" class="canvas" style="position: absolute; top: 0; left: 0; z-index: 10"></canvas>
            </div>
            </section>
            <footer class="modal-card-foot">
                <button type="button" class="button is-success is-fullwidth is-large" onclick="isFaceDetectionEnabled = false;Bulma('#modalPin').modal().open();"
                        href="javascript:;">
                    <span class="icon">
                       <i class="fa-solid fa-keyboard"></i>
                    </span>
                    <span>PIN</span>
                </button>
            </footer>
        </div>
    </div>

        <div class="modal" id="modalPin">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Registar Acesso</p>
                <button class="delete" aria-label="close"></button>
            </header>
            <section class="modal-card-body">
                <input type="password" class="input is-large my-2 has-text-centered" value="" id='txtInputPin'>
                <div class='columns is-mobile is-centered is-multiline'>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 1"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-1"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 2"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-2"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 3"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-3"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 4"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-4"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 5"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-5"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 6"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-6"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 7"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-7"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 8"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-8"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 9"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-9"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-4'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = document.getElementById('txtInputPin').value + 0"
                                href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-0"></i>
                            </span>
                        </button>
                    </div>
                    <div class='column is-8'>
                        <button type="button" class="button is-fullwidth is-large disable-dbl-tap-zoom"
                                onclick="document.getElementById('txtInputPin').value = '';" href="javascript:;">
                            <span class="icon">
                                <i class="fa-solid fa-backspace"></i>
                            </span>
                        </button>
                    </div>
                </div>

            </section>
            <footer class="modal-card-foot">
                <button type="button" class="button is-success is-fullwidth is-large" onclick="RegistarAcesso()"
                        href="javascript:;">
                    <span class="icon">
                        <i class="fa-solid fa-check-to-slot"></i>
                    </span>
                    <span>Gravar</span>
                </button>
            </footer>
        </div>
    </div>


    <div class="modal" id="modalMensagem">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Acesso</p>
                <button class="delete" aria-label="close"></button>
            </header>
            <section class="modal-card-body">
                <div id="divMensagem" class="is-1 has-text-centered title"></div>
            </section>
        </div>
    </div>

    <script>

    let isFaceDetectionEnabled = false; // Variável de controle
    let detected = 0;
    let nDetected = 0;
        

    document.addEventListener("DOMContentLoaded", async function () {
        const webcam = document.getElementById("video");
        const canvas = document.getElementById("canvas");
        const model = [@Html.Raw(Json.Serialize(Model.ToList()))];

        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video });
            webcam.srcObject = stream;
            webcam.play();
        } catch (err) {
            console.error("Erro ao acessar a webcam:", err);
        }

        function recognizeFace(detectedDescriptors, model, threshold) {
                        console.log(model);
            for (let i = 0; i < model.length; i++) {
                for (const person of detectedDescriptors) {
                    if (model[i].faceRec.split(' ').length == person.descriptor.length) {
                        const distance = faceapi.euclideanDistance(person.descriptor, model[i].faceRec.split(' '));
                        //console.log(model[i].faceRec.split(' '));
                        //console.log(distance);
                        if (distance < threshold) {
                            // Face recognized as a match
                            return model[i];
                        }
                    }
                }
            }

            // Face not recognized
            return 'UNKNOWN';
        }

        const startFaceDetection = async () => {
            const videoElement = webcam;
            const canvasElement = canvas;
            canvasElement.width = videoElement.width;
            canvasElement.height = videoElement.height;
            const displaySize = { width: videoElement.width, height: videoElement.height };
            faceapi.matchDimensions(canvasElement, displaySize);

            // Carregue o modelo de detecção facial
            await faceapi.nets.tinyFaceDetector.loadFromUri("/lib/vladmandic/face-api/model");
            await faceapi.loadFaceLandmarkModel("/lib/vladmandic/face-api/model");
            await faceapi.loadFaceRecognitionModel("/lib/vladmandic/face-api/model");
            //console.log(model);            

            const detectionInterval = setInterval(async () => {
                if (isFaceDetectionEnabled) {

            //console.log(document.getElementById('txtUtilizadorSelecionado').value);
                    if (detected > 10) {
                        notify("Detetado utilizador com sucesso!");
                        RegistarAcesso();
                        FecharModal();
                    }

                    if (nDetected > 40) {
                        notifyError("Nao foi detetado o utilizador selecionado!");
                        FecharModal();
                    }

                    const detections = await faceapi.detectAllFaces(videoElement, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();

                    // Aqui, você pode verificar as detecções faciais e tomar medidas apropriadas
                    if (detections.length > 0) {
                        var p = recognizeFace(detections, model[0].filter(obj => obj.id === parseInt(document.getElementById('txtUtilizadorSelecionado').value)), 0.50);
                        if (p.id == document.getElementById('txtUtilizadorSelecionado').value) {
                            detected++;
                        } else {
                            nDetected++;
                        }
                    } else {
                        nDetected++;
                    }

                    canvasElement
                        .getContext("2d")
                        .clearRect(0, 0, canvasElement.width, canvasElement.height);
                    faceapi.draw.drawDetections(canvasElement, detections);
                }
            }, 100);
        };

        startFaceDetection();
    });


  function AbrirModal(id, nome) {
    document.getElementById('txtUtilizadorSelecionado').value = id;
    document.getElementById('txtHeaderModal').innerHTML = "Registar Acesso - " + nome;
    Bulma('#modalFaceId').modal().open();
      isFaceDetectionEnabled = true;
  }

    function FecharModal() {
        isFaceDetectionEnabled = false;
        nDetected = 0;
        detected = 0;
        document.getElementById('txtUtilizadorSelecionado').value = '0';
        Bulma('#modalFaceId').modal().close();
        Bulma('#modalPin').modal().close();
        showDiv();
    }
    
    function RegistarAcesso() {
    $.ajax({
      type: "POST",
      url: "/Acessos/Acesso",
      data: { "api": '@ViewData["API"]', "id": document.getElementById('txtUtilizadorSelecionado').value, "tipo": "3", "pin": "9233" },
      success: function (result) {
        $(function () {
          if (result[0] == "1") {
            document.getElementById("divMensagem").innerHTML = result[1];
            Bulma('#modalFaceId').modal().close();
            Bulma('#modalMensagem').modal().open();
            setTimeout(function () {
                Bulma('#modalMensagem').modal().close();
            }, 2500);
          } else {
            Bulma('#modalFaceId').modal().close();
            Bulma('#modalPin').modal().close();
            document.getElementById('txtInputPin').value = '';
            notifyError(result[1]);
          }
        });
      }
    });
  }


    function NotificacaoEscritorio() {
    $.ajax({
      type: "POST",
      url: "/Utilizadores/Notificacao",
      data: { "api": '@ViewData["API"]', "Mensagem": "Está alguem na entrada!" },
      success: function (result) {
          notify("Notificação enviada com sucesso");
      }
    });
  }

    </script>
